pub mod food;
extern crate hyper;
#[macro_use]
extern crate rustful;
extern crate serde;
extern crate serde_json;
use rustful::{Context, Handler, Response, Server, TreeRouter};
use rustful::context::body::BodyReader;
use std::io::Read;
use hyper::header::{AccessControlAllowOrigin, Headers};

use food::*;
use food::food_lib::FOOD_LIB;
use food::engine::*;

struct FoodPlan;

impl Handler for FoodPlan {
    fn handle_request(&self, mut context: Context, response: Response) {
        let mut string = String::new();
        context.body.read_to_string(&mut string);

        println!("{}", string);

        let mut engine = SuggestionEngine::new();

        engine.add_avail(0,0,180);
        for x in (1..7) {
            engine.add_avail(x,0,50);
        }

        engine.fill_with_food();
        let data = engine.dishify();

        let mut response = response;

        let resp = serde_json::to_string_pretty(&data).ok().unwrap();

        addACA(&mut response);
        response.send(resp);
    }
}

fn addACA(response: &mut Response) {
    response.headers_mut().set(AccessControlAllowOrigin::Any);
}

fn main() {
    let my_router = insert_routes!{
        //Create a new TreeRouter
        TreeRouter::new() => {
            "foodplan" => {
                Get: FoodPlan(),
                Post: FoodPlan(),
            }
        }
    };

    Server {
        //Use a closure to handle requests.
        handlers: my_router,
        //Set the listening port to `8080`.
        host: 8080.into(),
        //Fill out everything else with default values.
        ..Server::default()
    }.run();
}
